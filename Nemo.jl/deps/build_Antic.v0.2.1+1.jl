using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libantic"], :libantic),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Antic_jll.jl/releases/download/Antic-v0.2.1+1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Antic.v0.2.1.aarch64-linux-gnu.tar.gz", "e9ed8105e2e9350758b18f0508402bf5e4569d34fdfc7d153a9e7b907d4f1481"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Antic.v0.2.1.aarch64-linux-musl.tar.gz", "deabce7f50a4afaba930e4cf1ed8f4d863b0e93210b330ab1d56e9259b1122a4"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Antic.v0.2.1.armv7l-linux-gnueabihf.tar.gz", "be54ed0f6824a4903cfbc2ac91c3984086bd08f71f9fa011836b3ca4b6c81dbc"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Antic.v0.2.1.armv7l-linux-musleabihf.tar.gz", "1a80ef15c006629bcdc66ecf0a1f51f246df3acef5766ec0ced33b4542929c86"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Antic.v0.2.1.i686-linux-gnu.tar.gz", "69b32d8551feb93497ad770e018b860a48ede85d51bb8d50d710936a9482013d"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Antic.v0.2.1.i686-linux-musl.tar.gz", "026f1e866bbeef7512775d8e695b67cc55b41cdc733ab2b5a623031c482296ea"),
    Windows(:i686) => ("$bin_prefix/Antic.v0.2.1.i686-w64-mingw32.tar.gz", "6d181628fed61a5282a861272c7207db262f5eb75bda43be37e62c81daccffd6"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Antic.v0.2.1.powerpc64le-linux-gnu.tar.gz", "e17b00f2f29f043e60d701472c577eee7e4632418858a2a14602a54338919b4b"),
    MacOS(:x86_64) => ("$bin_prefix/Antic.v0.2.1.x86_64-apple-darwin14.tar.gz", "9ef965c0031acdd36162dd1f6b2b2ddb4471c9bfda1d066e3504ef8d0a989026"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Antic.v0.2.1.x86_64-linux-gnu.tar.gz", "3fcb28745af5d9a731ccc7e7ac0b92ad25982169431dcee8591a8fe9071208d7"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Antic.v0.2.1.x86_64-linux-musl.tar.gz", "e0574964c188fdc832cd690d7ed921e443acc81dfa79878ae21fa05be2c3a967"),
    FreeBSD(:x86_64) => ("$bin_prefix/Antic.v0.2.1.x86_64-unknown-freebsd11.1.tar.gz", "b5febe8ab7aefef722529e70f6866fa7661c9b9f466cb48beeba4f179d938b15"),
    Windows(:x86_64) => ("$bin_prefix/Antic.v0.2.1.x86_64-w64-mingw32.tar.gz", "dd1d97e9fe7a0d5bed7bb2ea3dee9c7b8af333d1d8539d8d734867936cd661f7"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
