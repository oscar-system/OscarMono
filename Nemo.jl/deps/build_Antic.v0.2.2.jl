using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libantic"], :libantic),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Antic_jll.jl/releases/download/Antic-v0.2.2+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Antic.v0.2.2.aarch64-linux-gnu.tar.gz", "627980f3071081844592f8034567e50f9891f26cfd8e35927dc9a4680304e756"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Antic.v0.2.2.aarch64-linux-musl.tar.gz", "f9b738c5f843a3a955375ac59336d7f67d86ab652c38be8fbe7157f937bd453a"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Antic.v0.2.2.armv7l-linux-gnueabihf.tar.gz", "668640950a46403e4d6f673aa86d1c22a41eb75d21d405e60a964db15d160644"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Antic.v0.2.2.armv7l-linux-musleabihf.tar.gz", "783070a4c01cb785149b198d0d9ac94daa646a2339a65a5e96eda9ebf56bca1c"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Antic.v0.2.2.i686-linux-gnu.tar.gz", "276d77b16294e9bcd4096d3384bcdae864824aa2c8faba5d57f9606f6508539a"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Antic.v0.2.2.i686-linux-musl.tar.gz", "d838d2ec7c4a985aa27f554b8b91a56ce1b400d4dd00fa07883c2b00758ff2a3"),
    Windows(:i686) => ("$bin_prefix/Antic.v0.2.2.i686-w64-mingw32.tar.gz", "313518054b6ae6fd0275695ce21e60b0658e1e673baacd697d6123addc96c243"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Antic.v0.2.2.powerpc64le-linux-gnu.tar.gz", "2891a7fd4c6c636b136f9d3ce9dca3f78d19af88b165b2ec97ac7838388af06a"),
    MacOS(:x86_64) => ("$bin_prefix/Antic.v0.2.2.x86_64-apple-darwin14.tar.gz", "8f17c5d9bfc8aa24e200f8a9747039e4efae60db5b30a9310a06a06680906c2b"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Antic.v0.2.2.x86_64-linux-gnu.tar.gz", "7065e84edfca85bf57ecbd2e6fad3da27701f12bfdd7c33adaa6a82bb1b859fd"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Antic.v0.2.2.x86_64-linux-musl.tar.gz", "11dc84a16b3f2f23e5007ad36abfb53ff83f2fca9feabccb5284b09e5c289676"),
    FreeBSD(:x86_64) => ("$bin_prefix/Antic.v0.2.2.x86_64-unknown-freebsd11.1.tar.gz", "e8862d90c9b8b3818d42e6c4999d529180f107c91500bccd373c5793b52aae02"),
    Windows(:x86_64) => ("$bin_prefix/Antic.v0.2.2.x86_64-w64-mingw32.tar.gz", "1726de592ffe569039ce09614628f00a6f8934f566e86144cb87d510835b3f75"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
